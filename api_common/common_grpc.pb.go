// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: common.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PBFT_UpdateServerState_FullMethodName = "/common.PBFT/UpdateServerState"
	PBFT_ProcessTxnSet_FullMethodName     = "/common.PBFT/ProcessTxnSet"
	PBFT_EnqueueTxn_FullMethodName        = "/common.PBFT/EnqueueTxn"
	PBFT_ProcessTxn_FullMethodName        = "/common.PBFT/ProcessTxn"
	PBFT_InitiateDKG_FullMethodName       = "/common.PBFT/InitiateDKG"
	PBFT_PrePrepare_FullMethodName        = "/common.PBFT/PrePrepare"
	PBFT_Prepare_FullMethodName           = "/common.PBFT/Prepare"
	PBFT_Propose_FullMethodName           = "/common.PBFT/Propose"
	PBFT_Accept_FullMethodName            = "/common.PBFT/Accept"
	PBFT_Commit_FullMethodName            = "/common.PBFT/Commit"
	PBFT_Callback_FullMethodName          = "/common.PBFT/Callback"
	PBFT_Checkpoint_FullMethodName        = "/common.PBFT/Checkpoint"
	PBFT_Sync_FullMethodName              = "/common.PBFT/Sync"
	PBFT_ViewChange_FullMethodName        = "/common.PBFT/ViewChange"
	PBFT_NewView_FullMethodName           = "/common.PBFT/NewView"
	PBFT_PrintStatus_FullMethodName       = "/common.PBFT/PrintStatus"
	PBFT_PrintDB_FullMethodName           = "/common.PBFT/PrintDB"
	PBFT_NoOp_FullMethodName              = "/common.PBFT/NoOp"
)

// PBFTClient is the client API for PBFT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PBFTClient interface {
	UpdateServerState(ctx context.Context, in *UpdateServerStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProcessTxnSet(ctx context.Context, in *TxnSet, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EnqueueTxn(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProcessTxn(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InitiateDKG(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PrePrepare(ctx context.Context, in *PrePrepareRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Prepare(ctx context.Context, in *PBFTCommonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Accept(ctx context.Context, in *PBFTCommonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Callback(ctx context.Context, in *TxnResponse, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Checkpoint(ctx context.Context, in *PBFTCommonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Sync(ctx context.Context, in *PBFTCommonRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	ViewChange(ctx context.Context, in *PBFTCommonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NewView(ctx context.Context, in *PBFTCommonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PrintStatus(ctx context.Context, in *PrintStatusRequest, opts ...grpc.CallOption) (*PrintStatusResponse, error)
	PrintDB(ctx context.Context, in *PrintDBRequest, opts ...grpc.CallOption) (*PrintDBResponse, error)
	NoOp(ctx context.Context, in *PBFTCommonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type pBFTClient struct {
	cc grpc.ClientConnInterface
}

func NewPBFTClient(cc grpc.ClientConnInterface) PBFTClient {
	return &pBFTClient{cc}
}

func (c *pBFTClient) UpdateServerState(ctx context.Context, in *UpdateServerStateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_UpdateServerState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) ProcessTxnSet(ctx context.Context, in *TxnSet, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_ProcessTxnSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) EnqueueTxn(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_EnqueueTxn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) ProcessTxn(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_ProcessTxn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) InitiateDKG(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_InitiateDKG_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) PrePrepare(ctx context.Context, in *PrePrepareRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_PrePrepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) Prepare(ctx context.Context, in *PBFTCommonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_Prepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_Propose_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) Accept(ctx context.Context, in *PBFTCommonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_Accept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) Callback(ctx context.Context, in *TxnResponse, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_Callback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) Checkpoint(ctx context.Context, in *PBFTCommonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_Checkpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) Sync(ctx context.Context, in *PBFTCommonRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, PBFT_Sync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) ViewChange(ctx context.Context, in *PBFTCommonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_ViewChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) NewView(ctx context.Context, in *PBFTCommonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_NewView_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) PrintStatus(ctx context.Context, in *PrintStatusRequest, opts ...grpc.CallOption) (*PrintStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrintStatusResponse)
	err := c.cc.Invoke(ctx, PBFT_PrintStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) PrintDB(ctx context.Context, in *PrintDBRequest, opts ...grpc.CallOption) (*PrintDBResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrintDBResponse)
	err := c.cc.Invoke(ctx, PBFT_PrintDB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pBFTClient) NoOp(ctx context.Context, in *PBFTCommonRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PBFT_NoOp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PBFTServer is the server API for PBFT service.
// All implementations must embed UnimplementedPBFTServer
// for forward compatibility.
type PBFTServer interface {
	UpdateServerState(context.Context, *UpdateServerStateRequest) (*emptypb.Empty, error)
	ProcessTxnSet(context.Context, *TxnSet) (*emptypb.Empty, error)
	EnqueueTxn(context.Context, *TxnRequest) (*emptypb.Empty, error)
	ProcessTxn(context.Context, *TxnRequest) (*emptypb.Empty, error)
	InitiateDKG(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	PrePrepare(context.Context, *PrePrepareRequest) (*emptypb.Empty, error)
	Prepare(context.Context, *PBFTCommonRequest) (*emptypb.Empty, error)
	Propose(context.Context, *ProposeRequest) (*emptypb.Empty, error)
	Accept(context.Context, *PBFTCommonRequest) (*emptypb.Empty, error)
	Commit(context.Context, *CommitRequest) (*emptypb.Empty, error)
	Callback(context.Context, *TxnResponse) (*emptypb.Empty, error)
	Checkpoint(context.Context, *PBFTCommonRequest) (*emptypb.Empty, error)
	Sync(context.Context, *PBFTCommonRequest) (*SyncResponse, error)
	ViewChange(context.Context, *PBFTCommonRequest) (*emptypb.Empty, error)
	NewView(context.Context, *PBFTCommonRequest) (*emptypb.Empty, error)
	PrintStatus(context.Context, *PrintStatusRequest) (*PrintStatusResponse, error)
	PrintDB(context.Context, *PrintDBRequest) (*PrintDBResponse, error)
	NoOp(context.Context, *PBFTCommonRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPBFTServer()
}

// UnimplementedPBFTServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPBFTServer struct{}

func (UnimplementedPBFTServer) UpdateServerState(context.Context, *UpdateServerStateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerState not implemented")
}
func (UnimplementedPBFTServer) ProcessTxnSet(context.Context, *TxnSet) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTxnSet not implemented")
}
func (UnimplementedPBFTServer) EnqueueTxn(context.Context, *TxnRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnqueueTxn not implemented")
}
func (UnimplementedPBFTServer) ProcessTxn(context.Context, *TxnRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTxn not implemented")
}
func (UnimplementedPBFTServer) InitiateDKG(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateDKG not implemented")
}
func (UnimplementedPBFTServer) PrePrepare(context.Context, *PrePrepareRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrePrepare not implemented")
}
func (UnimplementedPBFTServer) Prepare(context.Context, *PBFTCommonRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedPBFTServer) Propose(context.Context, *ProposeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Propose not implemented")
}
func (UnimplementedPBFTServer) Accept(context.Context, *PBFTCommonRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (UnimplementedPBFTServer) Commit(context.Context, *CommitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedPBFTServer) Callback(context.Context, *TxnResponse) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Callback not implemented")
}
func (UnimplementedPBFTServer) Checkpoint(context.Context, *PBFTCommonRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkpoint not implemented")
}
func (UnimplementedPBFTServer) Sync(context.Context, *PBFTCommonRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedPBFTServer) ViewChange(context.Context, *PBFTCommonRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewChange not implemented")
}
func (UnimplementedPBFTServer) NewView(context.Context, *PBFTCommonRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewView not implemented")
}
func (UnimplementedPBFTServer) PrintStatus(context.Context, *PrintStatusRequest) (*PrintStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintStatus not implemented")
}
func (UnimplementedPBFTServer) PrintDB(context.Context, *PrintDBRequest) (*PrintDBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintDB not implemented")
}
func (UnimplementedPBFTServer) NoOp(context.Context, *PBFTCommonRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoOp not implemented")
}
func (UnimplementedPBFTServer) mustEmbedUnimplementedPBFTServer() {}
func (UnimplementedPBFTServer) testEmbeddedByValue()              {}

// UnsafePBFTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PBFTServer will
// result in compilation errors.
type UnsafePBFTServer interface {
	mustEmbedUnimplementedPBFTServer()
}

func RegisterPBFTServer(s grpc.ServiceRegistrar, srv PBFTServer) {
	// If the following call pancis, it indicates UnimplementedPBFTServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PBFT_ServiceDesc, srv)
}

func _PBFT_UpdateServerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).UpdateServerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_UpdateServerState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).UpdateServerState(ctx, req.(*UpdateServerStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_ProcessTxnSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).ProcessTxnSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_ProcessTxnSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).ProcessTxnSet(ctx, req.(*TxnSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_EnqueueTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).EnqueueTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_EnqueueTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).EnqueueTxn(ctx, req.(*TxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_ProcessTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).ProcessTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_ProcessTxn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).ProcessTxn(ctx, req.(*TxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_InitiateDKG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).InitiateDKG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_InitiateDKG_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).InitiateDKG(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_PrePrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrePrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).PrePrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_PrePrepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).PrePrepare(ctx, req.(*PrePrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PBFTCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_Prepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).Prepare(ctx, req.(*PBFTCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_Propose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).Propose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_Propose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).Propose(ctx, req.(*ProposeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PBFTCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_Accept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).Accept(ctx, req.(*PBFTCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_Callback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).Callback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_Callback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).Callback(ctx, req.(*TxnResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_Checkpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PBFTCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).Checkpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_Checkpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).Checkpoint(ctx, req.(*PBFTCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PBFTCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).Sync(ctx, req.(*PBFTCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_ViewChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PBFTCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).ViewChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_ViewChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).ViewChange(ctx, req.(*PBFTCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_NewView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PBFTCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).NewView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_NewView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).NewView(ctx, req.(*PBFTCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_PrintStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrintStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).PrintStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_PrintStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).PrintStatus(ctx, req.(*PrintStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_PrintDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrintDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).PrintDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_PrintDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).PrintDB(ctx, req.(*PrintDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PBFT_NoOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PBFTCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PBFTServer).NoOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PBFT_NoOp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PBFTServer).NoOp(ctx, req.(*PBFTCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PBFT_ServiceDesc is the grpc.ServiceDesc for PBFT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PBFT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common.PBFT",
	HandlerType: (*PBFTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateServerState",
			Handler:    _PBFT_UpdateServerState_Handler,
		},
		{
			MethodName: "ProcessTxnSet",
			Handler:    _PBFT_ProcessTxnSet_Handler,
		},
		{
			MethodName: "EnqueueTxn",
			Handler:    _PBFT_EnqueueTxn_Handler,
		},
		{
			MethodName: "ProcessTxn",
			Handler:    _PBFT_ProcessTxn_Handler,
		},
		{
			MethodName: "InitiateDKG",
			Handler:    _PBFT_InitiateDKG_Handler,
		},
		{
			MethodName: "PrePrepare",
			Handler:    _PBFT_PrePrepare_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _PBFT_Prepare_Handler,
		},
		{
			MethodName: "Propose",
			Handler:    _PBFT_Propose_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _PBFT_Accept_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _PBFT_Commit_Handler,
		},
		{
			MethodName: "Callback",
			Handler:    _PBFT_Callback_Handler,
		},
		{
			MethodName: "Checkpoint",
			Handler:    _PBFT_Checkpoint_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _PBFT_Sync_Handler,
		},
		{
			MethodName: "ViewChange",
			Handler:    _PBFT_ViewChange_Handler,
		},
		{
			MethodName: "NewView",
			Handler:    _PBFT_NewView_Handler,
		},
		{
			MethodName: "PrintStatus",
			Handler:    _PBFT_PrintStatus_Handler,
		},
		{
			MethodName: "PrintDB",
			Handler:    _PBFT_PrintDB_Handler,
		},
		{
			MethodName: "NoOp",
			Handler:    _PBFT_NoOp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}
